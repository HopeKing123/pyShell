# 生成器
"""
通过列表推导式，可以直接创建一个列表
但是，受到内存限制，列表容量是有限的。若创建一个百万级别的元素列表，会占用很大的存储空间。
如果我们仅仅需要访问前面几个元素，那么后面绝大多数元素占用的空间就都白白浪费了。
所以，如果列表元素可以按照某种算法推算出来，那么我们是否可以在循环的过程中不断推算出后续的元素
这样就不必创建完整的list,从而节省大量的空间。在python中，这种一边循环一边计算的机制，称为生成器：generator

得到生成器的方式：
1.通过列表推导式得到生成器

"""

# 示例：以列表的形式将range的每个值*3并赋予newlist列表
newlist = [x * 3 for x in range(10)]
print(newlist)

# 生成器的方式实现()
g = (x * 3 for x in range(10))
print(type(g))

# 调用生成器方式一：__next__
print(g.__next__())

# 调用生成器方式二：next(生成器对象)   系统内置函数
# 每调用一次next则会产生一个元素
print(next(g))
# 超过生成器限额，则会抛出异常


# 通过循环，异常代码处理
while True:
    try:
        e = next(g)
        print(e)
    except:
        print('没有更多元素！')
        break



